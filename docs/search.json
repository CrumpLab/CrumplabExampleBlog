[
  {
    "objectID": "posts/PSYC_2002_01_jspsych/index.html",
    "href": "posts/PSYC_2002_01_jspsych/index.html",
    "title": "Running the jspsych tutorial code on a quarto blog",
    "section": "",
    "text": "This is a minimal example showing how to serve the jspsych tutorial code on a quarto blog using github pages.\nJspsych is a javascript library for coding online cognitive/behavioral experiments De Leeuw (2015).\nThe tutorial example code is for creating a simple reaction time task with jspsych, and can be found here https://www.jspsych.org/7.3/tutorials/rt-task/#the-final-code.\nThe general concept to running this on a quarto blog with github pages involve the following general steps\nSteps in quarto:\nWhen you render the blog the last step is make sure that the contents of jspsych_tutorial is copied into the docs folder so you can access it from the web. This is possible by including a resources entry with a pointer to the folder in the yaml for your blog post.\nFor example, the yaml at the top of this blog post entry is:\nAt this point you should be able to render the blog and push it to github. You can check that the jspsych tutorial assets are in the docs folder, they should be in docs/posts/yourpost/"
  },
  {
    "objectID": "posts/PSYC_2002_01_jspsych/index.html#linking-to-the-tutorial",
    "href": "posts/PSYC_2002_01_jspsych/index.html#linking-to-the-tutorial",
    "title": "Running the jspsych tutorial code on a quarto blog",
    "section": "Linking to the tutorial",
    "text": "Linking to the tutorial\nThe next step is to link to the tutorial folder. Because we named the main file index.html, we don’t have to specify which file to load because the browser will automatically load the index file.\nhttps://crumplab.com/CrumplabExampleBlog/posts/PSYC_2002_01_jspsych/jspsych_tutorial/"
  },
  {
    "objectID": "posts/first_post/index.html",
    "href": "posts/first_post/index.html",
    "title": "First post and learning by examples",
    "section": "",
    "text": "It is February 6th, 2023; and, this is an example quarto blog for students in my classes.\nThe purpose of this blog is to provide working examples of source code and other files showing how to implement various quarto and/or R functionality.\nI expect this blog will mostly be for students in PSYC 3470, but there will likely be additional blog posts for students in other classes or conducting research in the lab.\nThe source code for this repository can be viewed on github.\nMany of the contributions to this blog will be new posts. However, many other changes are possible, including adding whole new pages. A quarto blog is a special case of a quarto website and can easily be expanded with any quarto website feature. My plan is to keep the expansions relatively simple, and to document changes that I make on the changes page to show more working examples."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CrumpLabExampleBlog",
    "section": "",
    "text": "My tip sheet for week 2\n\n\n\n\n\n\n\n\n\n\n\n\nMatt Crump\n\n\n\n\n\n\n  \n\n\n\n\nFirst post and learning by examples\n\n\n\n\n\n\n\n\n\n\n\n\nMatt Crump\n\n\n\n\n\n\n  \n\n\n\n\nRunning the jspsych tutorial code on a quarto blog\n\n\n\n\n\n\n\nPsyc 2002\n\n\njspsych\n\n\n\n\n\n\n\n\n\n\n\nFeb 6, 2023\n\n\nMatt Crump\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "CrumpLabExampleBlog",
    "section": "",
    "text": "This is a template for using quarto to create a course blog. A course blog can be used in many ways to engage with course content. For example, you could use the blog to post assignments, or to dive more deeply into course material that interests you. By the end of the course, your blog can serve as a portfolio of ways that you engaged in the material. By learning how to use quarto for your blog, you will also be learning new skills for creating and sharing reproducible documents that could be useful to you in the future.\nThe purpose of this page is to provide tips and pointers about blogging with quarto. Quarto is simple enough for creating a basic course blog. However, it is also very deep and can be used to create all sorts of documents, from website, to slide decks, and books.\n\n\nMany questions about quarto can be answered from the quarto documentation located at: https://quarto.org.\nIf you are looking for something specific and don’t know where to find it on the website, use the search tool in the top right corner.\n\n\n\n\nTo use this template you will need a Github.com account, and access to R and Rstudio.\nYou can get access by creating a Github.com account, and downloading the necessary open-source software to your machine.\nIt is also possible to use Rstudio in your web-browser, which does not require downloading any software. There are two sets of instructions, one for the downloading approach, and the other for using Rstudio cloud. Scroll to the bottom for instructions on using Rstudio cloud.\n\n\n\nIn order to use this template you will need to install some free open-source software on your computer.\n\nSign up for a free account at https://github.com. This a website for sharing open-source software, but it can also be used to serve your blog as a website for free.\nDownload Github Desktop and install it on your machine. This should install the version control software git on your system, and you can use Github Desktop to easily push your blog from your local computer so that it can be viewed on Github.com.\nDownload R and install it on your machine. R is a programming language capable of many things, and it needs to be on your machine before you can run R Studio.\nDownload R Studio Desktop and install it on your machine. R Studio is called an “IDE” or integrated development environment, that you can use to write your blog with quarto.\n\n\n\n\nOnce you have the software installed, the next step is to create a quarto blog project in R studio. The collection of files in this template is a pre-made quarto blog project that you can modify for your own purposes. You can also make one yourself in Rstudio.\nAssuming you have downloaded this template, and you have installed the above software, then you need to open quartoCourseBlog.Rproj.\n\n\n\n\nTo find out if everything is working, try rendering the blog. Go to the “Build” Tab and press “Render Website”.\n\nAfter the rendering is complete, you should be able to view your blog. It might show up in the viewer pane like this:\n\nAnd if you press the ‘window-with-an-arrow’ button, you can view the website in your default browser. Quarto websites automatically adjust for the size of the window, so it may appear differently in the viewer pane versus the browser.\n\n\n\nAll of the blog posts are located in the posts folder.\n\nTo make a new post, copy an existing post and then modify it. For example, my posts folder currently contains one post, and it is inside the my_first_post folder.\n\nI can copy the folder and make a new one with the same contents from the Rstudio gear-box menu:\n\nI made a folder for a second post called Example_assignment.\n\nThese are the two files inside the folder. The .qmd file is a plain text file where you will write the blog post. This folder can also be used to store other assets you might put in the post, such as pictures.\n\n\n\nTo write a new post, open the .qmd file, edit the text, and then re-render the website. This is what the text in the .qmd file looked like when I copied it.\n\nThe text at the top between the “---” is called YAML, and provides meta-data for your document. This is where you can change the title, date, name, and add keywords if you want.\nThe rest of the document is for the main body of the post. For example, I changed the text to read:\n\n\n\n\n\nRender the website from the build tab again to see your new post.\n\n\n\nTo share your blog online you will have to publish it on a server that can be accessed by other people on the internet. There are multiple ways to do this step, and I recommend using Github pages. You can view more in-depth instructions from quarto here https://quarto.org/docs/publishing/github-pages.html.\nHere are the steps:\n\nOpen Github Desktop\nGo to preferences and sign in to your Github.com account\n“Add” your blog project folder to Github Desktop\nThere should be an option for a commit message, write a note in there like “first commit”.\nPublish to github.com and uncheck private repository so that other people will be able to see your repository.\nYou should now be able to see your new repository in your github.com profile, which means you should be able to see a copy of your blog files in the repository.\nActivate Github pages for your repository (under repository settings), and serve the page from the “docs” folder.\nAccess the blog from the url generated by the github pages settings page.\n\n\n\n\nWhenever you make changes to your blog project that you want to share online follow these steps:\n\nMake changes to your blog, like writing a new post, or editing an old one.\nRender the website in R-studio. What you see here should be what you will see later on Github.com\nOpen Github Desktop and Commit your changes, by writing brief commit title, and pressing commit.\nThen, use Github Desktop to Push your changes to github.com.\nWait half a minute or so, and you should see your new content appear on the website.\n\n\n\n\nI am planning to add a video overview of these steps soon. In the meantime, these instructions may be enough to get started with R studio cloud and github.com.\n\nSign up for a free account with posit cloud here https://posit.cloud/plans/free\nSign up for a free https://github.com account.\nLog in to Github, and search for this repository https://github.com/CrumpLab/quartoCourseBlog.\n\n\nClick the green “Use this template” Button\nThis will make a copy of the template in your github account, it will show up as one of your repositories\nGive your new repository a name\n\n\nActivate Github pages for your repository (under repository settings), and serve the page from the “docs” folder. You should now be able to view the blog from the url given by github pages.\nLog into Posit Cloud\nCreate a New Project, choose “New Project from Git Repository”\n\n\nenter the URL to the github repository you just made\n\n\nLoad the project, and edit/modify the files (see above for examples of creating new posts etc.)\nTo send your changed files back to github.com you need to do a few steps\n\n\nFrom the Git tab: stage your changes, commit your changes, and push your changes using the green up arrow.\nYou will also need to authenticate your git credentials, and allow Rstudio cloud to update your github repository\nIn the terminal run these two lines, but replace with your name and email\n\n\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"you@example.com\"\n\nWhen you “push” your changes back to Github using the green up arrow, you will be asked to enter a username and password. You can enter the username for your Github.com account, but your password won’t work. You need to set up a personal access token.\nGo to your github.com profile > settings page. Scroll down, click on “<> Developer Settings”, on the left\nClick on personal access tokens, generate a new token, give it repo access. Save the text somewhere and use it as your github password when pushing from RStudio.\n\n\nAt this point you should be able to work on your blog in Rstudio Cloud, and push your changes to have them updated on github.com, which serves your blog online.\n\n\n\n\nSee this growing list of quarto resources for much, much more:\nhttps://github.com/mcanouil/awesome-quarto"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "The content on this page is from about.qmd. Edit that file to change how this page looks.\n“About” pages are special quarto template pages, with multiple options: https://quarto.org/docs/websites/website-about.html.\nTry changing the template type from jolla to one of the other options for a different look and feel."
  },
  {
    "objectID": "changes.html",
    "href": "changes.html",
    "title": "Changes",
    "section": "",
    "text": "This file will attempt to keep track of structural changes to this site to provide examples of modification options. See also the quarto website documentation for more help.\nThis blog was initialized as a quarto blog project using Rstudio, and then turned into a github template available here https://github.com/CrumpLab/quartoCourseBlog.\nInitial changes were making a new post in the posts folder."
  },
  {
    "objectID": "changes.html#changes.qmd",
    "href": "changes.html#changes.qmd",
    "title": "Changes",
    "section": "changes.qmd",
    "text": "changes.qmd\nThis page is not a regular blog post, instead it has been added as a new page to the top level navigation of the website.\nTo add this page the file changes.qmd was created in the root director. Next, the _quarto.yml was modified to add this page to the top-level navigation.\nThe original yml file had this text:\nproject:\n  type: website\n  output-dir: docs\n\nwebsite:\n  title: \"quartoCourseBlog\"\n  navbar:\n    right:\n      - about.qmd\n      - icon: github\n        href: https://github.com/CrumpLab/quartoCourseBlog\n      - icon: twitter\n        href: https://twitter.com/MattCrumpLab\nformat:\n  html:\n    theme: minty\n    css: styles.css\n\neditor: visual\nI wanted this page to appear on the left side, so under the navbar section I added left, and a new entry for changes.qmd.\nproject:\n  type: website\n  output-dir: docs\n\nwebsite:\n  title: \"quartoCourseBlog\"\n  navbar:\n    left:\n      - changes.qmd\n    right:\n      - about.qmd\n      - icon: github\n        href: https://github.com/CrumpLab/quartoCourseBlog\n      - icon: twitter\n        href: https://twitter.com/MattCrumpLab\nformat:\n  html:\n    theme: minty\n    css: styles.css\n\neditor: visual"
  },
  {
    "objectID": "changes.html#blog-title",
    "href": "changes.html#blog-title",
    "title": "Changes",
    "section": "Blog title",
    "text": "Blog title\nThe template gives the default name “quartoCourseBlog”. I changed this to “CrumpLabExampleBlog” in two files:\n\n_quarto.yml - changed the title field\n\nFrom:\nwebsite:\n  title: \"quartoCourseBlog\"\nTo:\nwebsite:\n  title: \"CrumpLabExampleBlog\"\nNotice, this changes the title in the top-level navigation, but does not change the larger bolded title in the header of the page.\n\n\nindex.qmd - change title field in the top-level yaml.\n\nFrom:\n---\ntitle: \"quartoCourseBlog\"\nlisting:\n  contents: posts\n  sort: \"date desc\"\n  type: default\n  image-placeholder: \"images/logo.png\"\n  categories: true\n  sort-ui: false\n  filter-ui: false\npage-layout: full\ntitle-block-banner: true\n---\nTo:\n---\ntitle: \"CrumpLabExampleBlog\"\nlisting:\n  contents: posts\n  sort: \"date desc\"\n  type: default\n  image-placeholder: \"images/logo.png\"\n  categories: true\n  sort-ui: false\n  filter-ui: false\npage-layout: full\ntitle-block-banner: true\n---\nNow the title in the navigation is the same as the title in the header for the page."
  },
  {
    "objectID": "changes.html#remove-title-block",
    "href": "changes.html#remove-title-block",
    "title": "Changes",
    "section": "Remove title block",
    "text": "Remove title block\nThe large block of green space with the blog title is called the title-block-banner, and this is an option in the yaml for index.qmd. Setting the option to false removes the title block.\n---\ntitle: \"CrumpLabExampleBlog\"\nlisting:\n  contents: posts\n  sort: \"date desc\"\n  type: default\n  image-placeholder: \"images/logo.png\"\n  categories: true\n  sort-ui: false\n  filter-ui: false\npage-layout: full\ntitle-block-banner: false\n---"
  },
  {
    "objectID": "changes.html#change-default-image",
    "href": "changes.html#change-default-image",
    "title": "Changes",
    "section": "Change default image",
    "text": "Change default image\nThe index.qmd file in the root folder has a line:\nimage-placeholder: \"images/logo.png\"\nI changed replaced the file in images/logo.png with a different file to change the image. I could have put a different image in that folder, and then changed the name in the yaml as well."
  },
  {
    "objectID": "changes.html#make-sure-github-icon-links-to-correct-github-repo",
    "href": "changes.html#make-sure-github-icon-links-to-correct-github-repo",
    "title": "Changes",
    "section": "Make sure github icon links to correct github repo",
    "text": "Make sure github icon links to correct github repo\nChange the href for the github entry to the url for your github repository.\nwebsite:\n  title: \"CrumpLabExampleBlog\"\n  navbar:\n    left:\n      - changes.qmd\n    right:\n      - about.qmd\n      - icon: github\n        href: https://github.com/CrumpLab/CrumplabExampleBlog\n      - icon: twitter\n        href: https://twitter.com/MattCrumpLab"
  },
  {
    "objectID": "posts/tip_sheet/index.html",
    "href": "posts/tip_sheet/index.html",
    "title": "My tip sheet for week 2",
    "section": "",
    "text": "How to commit and push changes to github?\n\nMake some changes to your files\nRender your website in Rstudio\nCommit your changes in github desktop with a commit message\nPush to github.com\n\nYou can use Rstudio too…"
  },
  {
    "objectID": "posts/tip_sheet/index.html#restarting-r",
    "href": "posts/tip_sheet/index.html#restarting-r",
    "title": "My tip sheet for week 2",
    "section": "restarting R",
    "text": "restarting R\n\ntype .rs.restartR() in the console THIS DID NOT WORK PROPERLY"
  }
]