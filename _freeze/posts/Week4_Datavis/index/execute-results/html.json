{
  "hash": "07498c6e1685d85c1124f8ac26306ff7",
  "result": {
    "markdown": "---\ntitle: \"Week 4 Datavis\"\nauthor: \"Matt Crump\"\n---\n\n\n## A quick demo\n\n1. Get some data in tidy data format\n2. Understand what kind of data types you have in the dataframe so you can plot it appropriately\n3. Graph the data with ggplot2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#loads ggplot2, and some example data sets\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.1 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.3.0      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\n# the starwars data is loaded by tidyverse\n# assign the starwars dataset to a variable name\nstarwars_copy <- starwars\n\n# check out some of the datatypes\nhead(starwars_copy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 14\n  name         height  mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex   gender homew…⁵\n  <chr>         <int> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n1 Luke Skywal…    172    77 blond   fair    blue       19   male  mascu… Tatooi…\n2 C-3PO           167    75 <NA>    gold    yellow    112   none  mascu… Tatooi…\n3 R2-D2            96    32 <NA>    white,… red        33   none  mascu… Naboo  \n4 Darth Vader     202   136 none    white   yellow     41.9 male  mascu… Tatooi…\n5 Leia Organa     150    49 brown   light   brown      19   fema… femin… Aldera…\n6 Owen Lars       178   120 brown,… light   blue       52   male  mascu… Tatooi…\n# … with 4 more variables: species <chr>, films <list>, vehicles <list>,\n#   starships <list>, and abbreviated variable names ¹​hair_color, ²​skin_color,\n#   ³​eye_color, ⁴​birth_year, ⁵​homeworld\n```\n:::\n\n```{.r .cell-code}\nclass(starwars_copy$name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nclass(starwars_copy$height)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nclass(starwars_copy$mass)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(starwars_copy$homeworld)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\n# plot some variables\nggplot(data = starwars_copy,\n       mapping = aes(x=height,y=mass) )+\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 28 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\n\n## Data-types\n\nWhat is in a name?\n\nEverything is a function.\n\n### Object assignment\n\nThis is one of the simplest things you could do in R. What is happening here?\n\n- `a` is the name of a new object that is being created\n- `<-` is the assignment operator. It looks like an arrow, with the `1` going into the `a`\n- `1` is an object that is being assigned into `a`\n\n- consequences: a new object with the name `a` is created. This new object has been assigned the content `1`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# assign 1 to object named a\na <- 1\n1 -> b\n\nf <- 4 -> g\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# look at the data type of object in a\nclass(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n\n### Kinds of data types\n\n#### Integers \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#integers (no decimals)\n# L specifies integer\ntypeof(1L) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nclass(1L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nis.integer(1L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nas.integer(1.1) # coerces to integer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nas.integer(1.5) # rounds down\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nas.integer(1.9) # rounds down\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\ninteger(length = 5) #initialize a vector for integers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 0 0 0 0\n```\n:::\n\n```{.r .cell-code}\nis.integer(as.integer(1:5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n#### Numeric/doubles\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# decimal numbers\n# numbers without decimals default to numeric\ntypeof(1) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nclass(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nis.numeric(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nas.numeric(1L) # coerces integer to numeric\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nnumeric(length = 5) #initialize a vector for doubles\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 0 0 0 0\n```\n:::\n:::\n\n\n#### Character\n\nAny text between quotes get's treated as a character string\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(\"1\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nclass(\"1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nis.character(\"1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nas.character(1) # coerces numeric to character\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\"\n```\n:::\n\n```{.r .cell-code}\ncharacter(length = 5) #initialize a vector for character strings\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"\" \"\" \"\" \"\" \"\"\n```\n:::\n:::\n\n\n#### Logical/Boolean\n\nUppercase TRUE, or FALSE makes logical (binary) variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nclass(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nis.logical(FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nas.logical(1) # coerces 1 to TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nas.logical(0) # coerces 0  to FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nlogical(length = 5) # initialize a logical vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE FALSE FALSE\n```\n:::\n:::\n\n\n### Object types\n\nR has many object types to store individual elements, or collections of elements.\n\n### Vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# makes a vector with one thing in it\none_thing <- 1\ntwo_things <- c(1,2) \nmany_things <- 1:100\n```\n:::\n\n\n### data.frame\n\nA table with rows and columns. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_df <- data.frame(a = 1:5,\n                    b = c(\"one\",\"two\",\"three\",\"four\",\"five\"),\n                    random = runif(5,0,1))\n#print to see it\nmy_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a     b     random\n1 1   one 0.58632516\n2 2   two 0.27843563\n3 3 three 0.78762079\n4 4  four 0.09455869\n5 5  five 0.76377733\n```\n:::\n\n```{.r .cell-code}\n# access columns with $\nmy_df$a == 1:5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE TRUE TRUE TRUE TRUE\n```\n:::\n\n```{.r .cell-code}\nmy_df$b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"one\"   \"two\"   \"three\" \"four\"  \"five\" \n```\n:::\n\n```{.r .cell-code}\n## access rows or columns with [row,column]\nmy_df[1,] # row 1, all columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a   b    random\n1 1 one 0.5863252\n```\n:::\n\n```{.r .cell-code}\nmy_df[,1] # column 1, all rows\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\nmy_df[1:2,] # rows 1 to 2, all columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a   b    random\n1 1 one 0.5863252\n2 2 two 0.2784356\n```\n:::\n\n```{.r .cell-code}\nmy_df[1:2, 3] # rows 1 to 2, but only for column 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5863252 0.2784356\n```\n:::\n:::\n\n\n### Tibble\n\nA table with rows and columns. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_df <- tibble(a = 1:5,\n                    b = c(\"one\",\"two\",\"three\",\"four\",\"five\"),\n                    random = runif(5,0,1))\n#print to see it\nmy_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n      a b     random\n  <int> <chr>  <dbl>\n1     1 one    0.750\n2     2 two    0.636\n3     3 three  0.207\n4     4 four   0.709\n5     5 five   0.444\n```\n:::\n\n```{.r .cell-code}\n# access columns with $\nmy_df$a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\nmy_df$b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"one\"   \"two\"   \"three\" \"four\"  \"five\" \n```\n:::\n\n```{.r .cell-code}\n## access rows or columns with [row,column]\nmy_df[1,] # row 1, all columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n      a b     random\n  <int> <chr>  <dbl>\n1     1 one    0.750\n```\n:::\n\n```{.r .cell-code}\nmy_df[,1] # column 1, all rows\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 1\n      a\n  <int>\n1     1\n2     2\n3     3\n4     4\n5     5\n```\n:::\n\n```{.r .cell-code}\nmy_df[1:2,] # rows 1 to 2, all columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n      a b     random\n  <int> <chr>  <dbl>\n1     1 one    0.750\n2     2 two    0.636\n```\n:::\n\n```{.r .cell-code}\nmy_df[1:2, 3] # rows 1 to 2, but only for column 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 1\n  random\n   <dbl>\n1  0.750\n2  0.636\n```\n:::\n\n```{.r .cell-code}\nmy_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n      a b     random\n  <int> <chr>  <dbl>\n1     1 one    0.750\n2     2 two    0.636\n3     3 three  0.207\n4     4 four   0.709\n5     5 five   0.444\n```\n:::\n:::\n\n### lists\n\n\n::: {.cell}\n\n:::\n\n\n\n## Tidy data\n\nTidy data codes observations in a table. Each observation has its own row. The columns contain characteristics of the observation. For example, a demographics table could have one row per person, and several columns describing features of the person. Or, an expriment may involve multiple measures of a dependent variable across people and conditions of an independent variable. In this case, each row would contain one measurement, and each column would code the conditions associated with the measurement.\n\nAn example of wide vs. long data. In this example, the long-data is in tidy format. The accuracy measure is the dependent variable, and there is one row per measurement.\n\n<https://crumplab.com/programmingforpsych/dealing-with-data.html#standard-data-formats>\n\n\n## ggplot2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 707 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): caller_id, employee_id, issue_category\ndbl  (3): wait_time, call_time, satisfaction\ndttm (1): call_start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nhead(survey_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n  caller_id employee_id call_start          wait_time call_time issue_…¹ satis…²\n  <chr>     <chr>       <dttm>                  <dbl>     <dbl> <chr>      <dbl>\n1 C001      E01         2020-09-22 10:47:54       169        34 tech           3\n2 C002      E01         2020-09-07 22:10:25       206        52 tech           2\n3 C003      E01         2020-07-06 12:08:59       207        41 tech           2\n4 C004      E01         2020-02-20 13:12:03       132        16 tech           4\n5 C005      E01         2020-11-08 17:42:10       178        20 returns        3\n6 C006      E01         2020-06-01 19:06:12       230        46 returns        2\n# … with abbreviated variable names ¹​issue_category, ²​satisfaction\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nggplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = survey_data,\n       mapping = aes(x = wait_time,\n                     y = satisfaction)\n       )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = wait_time, y = satisfaction))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-3.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(survey_data, \n       aes(x = wait_time, \n           y = satisfaction)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-4.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(survey_data, \n       aes(x = wait_time, \n           y = satisfaction)) + \n  geom_point(color=\"red\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-5.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(survey_data, \n       aes(x = wait_time, \n           y = satisfaction)) + \n  geom_point(color=\"black\", size = 5) +\n   geom_point(color=\"#fa2fcb\", size = 4) +\n  geom_smooth(method =\"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-6.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(survey_data, \n       aes(x = wait_time, \n           y = satisfaction,\n           color = wait_time,\n           size = satisfaction)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-7.png){width=672}\n:::\n\n```{.r .cell-code}\nmin(survey_data$wait_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23\n```\n:::\n\n```{.r .cell-code}\nmax(survey_data$wait_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 314\n```\n:::\n\n```{.r .cell-code}\nlength(survey_data$wait_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 707\n```\n:::\n\n```{.r .cell-code}\nggplot(data=survey_data, mapping= aes(x=wait_time))+\n  geom_histogram(bins=50, color=\"red\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-8.png){width=672}\n:::\n:::\n\n\n\n## Random stuff I did in class\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(10.0245435234534)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(10L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(\"1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\n\"one\" < \"two\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n\"z\" < \"w\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis.numeric(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis.numeric(\"1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\na <- c(1,2,3)\nis.numeric(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis.numeric(starwars$name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis.numeric(starwars$mass)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis.numeric(starwars$height)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis.integer(starwars$height)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nclass(starwars$height)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nhead(starwars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 14\n  name         height  mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex   gender homew…⁵\n  <chr>         <int> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n1 Luke Skywal…    172    77 blond   fair    blue       19   male  mascu… Tatooi…\n2 C-3PO           167    75 <NA>    gold    yellow    112   none  mascu… Tatooi…\n3 R2-D2            96    32 <NA>    white,… red        33   none  mascu… Naboo  \n4 Darth Vader     202   136 none    white   yellow     41.9 male  mascu… Tatooi…\n5 Leia Organa     150    49 brown   light   brown      19   fema… femin… Aldera…\n6 Owen Lars       178   120 brown,… light   blue       52   male  mascu… Tatooi…\n# … with 4 more variables: species <chr>, films <list>, vehicles <list>,\n#   starships <list>, and abbreviated variable names ¹​hair_color, ²​skin_color,\n#   ³​eye_color, ⁴​birth_year, ⁵​homeworld\n```\n:::\n\n```{.r .cell-code}\nclass(starwars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\nclass(starwars_copy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nclass(starwars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\nstarwars\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 × 14\n   name        height  mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex   gender homew…⁵\n   <chr>        <int> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n 1 Luke Skywa…    172    77 blond   fair    blue       19   male  mascu… Tatooi…\n 2 C-3PO          167    75 <NA>    gold    yellow    112   none  mascu… Tatooi…\n 3 R2-D2           96    32 <NA>    white,… red        33   none  mascu… Naboo  \n 4 Darth Vader    202   136 none    white   yellow     41.9 male  mascu… Tatooi…\n 5 Leia Organa    150    49 brown   light   brown      19   fema… femin… Aldera…\n 6 Owen Lars      178   120 brown,… light   blue       52   male  mascu… Tatooi…\n 7 Beru White…    165    75 brown   light   blue       47   fema… femin… Tatooi…\n 8 R5-D4           97    32 <NA>    white,… red        NA   none  mascu… Tatooi…\n 9 Biggs Dark…    183    84 black   light   brown      24   male  mascu… Tatooi…\n10 Obi-Wan Ke…    182    77 auburn… fair    blue-g…    57   male  mascu… Stewjon\n# … with 77 more rows, 4 more variables: species <chr>, films <list>,\n#   vehicles <list>, starships <list>, and abbreviated variable names\n#   ¹​hair_color, ²​skin_color, ³​eye_color, ⁴​birth_year, ⁵​homeworld\n```\n:::\n\n```{.r .cell-code}\nstarwars_copy <- starwars\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 707 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): caller_id, employee_id, issue_category\ndbl  (3): wait_time, call_time, satisfaction\ndttm (1): call_start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}